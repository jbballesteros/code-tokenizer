// Generated by CoffeeScript 1.7.1
var StringScanner, Tokenizer, _;

_ = require('lodash');

StringScanner = require('pstrscan');

Tokenizer = (function() {
  var BYTE_LIMIT, MULTI_LINE_COMMENTS, SINGLE_LINE_COMMENTS, START_MULTI_LINE_COMMENT, START_SINGLE_LINE_COMMENT, extract_sgml_tokens, extract_shebang, extract_tokens;

  function Tokenizer() {}

  BYTE_LIMIT = 100000;

  SINGLE_LINE_COMMENTS = ['//', '#', '%'];

  MULTI_LINE_COMMENTS = [['/*', '*/'], ['<!--', '-->'], ['{-', '-}'], ['(*', '*)'], ['"""', '"""']];

  RegExp.escape = function(str) {
    return String(str).replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1");
  };

  START_SINGLE_LINE_COMMENT = new RegExp(_.map(SINGLE_LINE_COMMENTS, function(c) {
    return "\s*" + (RegExp.escape(c)) + " ";
  }).join('|'));

  START_MULTI_LINE_COMMENT = new RegExp(_.map(MULTI_LINE_COMMENTS, function(c) {
    return RegExp.escape(c[0]);
  }).join('|'));

  Tokenizer.prototype.tokenize = function(data) {
    return extract_tokens(data);
  };

  extract_tokens = function(data) {
    var MULTI_LINE_COMMENTS_flat, close_token, close_token_regex, name, s, token, tokens, w;
    s = new StringScanner(data);
    tokens = [];
    while (!s.hasTerminated()) {
      if (s.pos >= BYTE_LIMIT) {
        break;
      }
      if (token = s.scan(/^#!.+$/m)) {
        if (name = extract_shebang(token)) {
          tokens.push("SHEBANG#!" + name);
        }
      } else if (s.atBOL() && (token = s.scan(START_SINGLE_LINE_COMMENT))) {
        s.skipUntil(/\n|$/);
      } else if (token = s.scan(START_MULTI_LINE_COMMENT)) {
        MULTI_LINE_COMMENTS_flat = _.flatten(MULTI_LINE_COMMENTS);
        close_token = MULTI_LINE_COMMENTS_flat[_.indexOf(MULTI_LINE_COMMENTS_flat, token) + 1];
        close_token_regex = new RegExp(RegExp.escape(close_token));
        s.skipUntil(close_token_regex);
      } else if (s.scan(/"/)) {
        if (s.peek(1) === "\"") {
          s.scanChar();
        } else {
          w = s.skipUntil(/[^\\]"/);
        }
      } else if (s.scan(/'/)) {
        if (s.peek(1) === "'") {
          s.scanChar();
        } else {
          s.skipUntil(/[^\\]'/);
        }
      } else if (s.scan(/(0x)?\d(\d|\.)*/)) {

      } else if (token = s.scan(/<[^\s<>][^<>]*>/)) {
        _.forEach(extract_sgml_tokens(token), function(t) {
          return tokens.push(t);
        });
      } else if (token = s.scan(/;|\{|\}|\(|\)|\[|\]/)) {
        tokens.push(token);
      } else if (token = s.scan(/[\w\.@#\/\*]+/)) {
        tokens.push(token);
      } else if (token = s.scan(/<<?|\+|\-|\*|\/|%|&&?|\|\|?/)) {
        tokens.push(token);
      } else {
        s.scanChar();
      }
    }
    return tokens;
  };

  extract_shebang = function(data) {
    var s, script, scriptPath;
    s = new StringScanner(data);
    if (scriptPath = s.scan(/^#!\s*\S+/)) {
      script = _.last(scriptPath.split('/'));
      if (script === 'env') {
        s.scan(/\s+/);
        script = s.scan(/\S+/);
      }
      if (script) {
        script = script.match(/[^\d]+/);
      }
      return script;
    } else {
      return null;
    }
  };

  extract_sgml_tokens = function(data) {
    var s, token, tokens;
    s = new StringScanner(data);
    tokens = [];
    while (!s.hasTerminated()) {
      if (token = s.scan(/<\/?[^\s>]+/)) {
        tokens.push("" + token + ">");
      } else if (token = s.scan(/\w+=/)) {
        tokens.push(token);
        if (s.scan(/"/)) {
          s.skipUntil(/[^\\]"/);
        } else if (s.scan(/'/)) {
          s.skipUntil(/[^\\]'/);
        } else {
          s.skipUntil(/\w+/);
        }
      } else if (token = s.scan(/\w+/)) {
        tokens.push(token);
      } else if (s.scan(/>/)) {
        s.terminate();
      } else {
        s.scanChar();
      }
    }
    return tokens;
  };

  return Tokenizer;

})();

module.exports.Tokenizer = Tokenizer;
